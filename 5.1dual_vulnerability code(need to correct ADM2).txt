
# 加载必要的包
library(fixest)       # 固定效应模型
library(data.table)   # 高效数据处理
library(readr)        # 读取CSV文件
library(writexl)      # 写入Excel文件
library(dplyr)        # 数据操作
library(tidyr)        # 数据重塑
library(ggplot2)      # 数据可视化
library(RColorBrewer) # 颜色方案
library(viridis)      # 现代配色
library(gridExtra)    # 图形组合
library(scales)       # 格式化图例

cat("========== 巴西基孔肯雅热双重脆弱指数计算系统 ==========\n")

#####################################
## 辅助函数：添加透明度
#####################################
add.alpha <- function(col, alpha=1) {
  apply(sapply(col, col2rgb)/255, 2, 
        function(x) rgb(x[1], x[2], x[3], alpha))
}

#####################################
## 第一阶段：数据准备和预处理
#####################################

# 设置输出目录 - 修复版
output_dir <- "C:/Users/a1230/Desktop/dual_vulnerability_analysis"
tryCatch({
  dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
  # 测试写入权限
  test_file <- file.path(output_dir, "test.txt")
  writeLines("test", test_file)
  file.remove(test_file)
  cat("输出目录创建成功:", getwd(), "/", output_dir, "\n")
}, error = function(e) {
  # 如果无法创建目录，使用临时目录
  output_dir <<- tempdir()
  cat("使用临时目录:", output_dir, "\n")
})

cat("\n======= 数据加载和预处理 =======\n")

# 数据文件路径（请根据实际情况修改）
data_path <- "C:/Users/a1230/Desktop/基孔肯雅热/chikungunya_weather_population_merged.csv"

# 检查文件是否存在
if(!file.exists(data_path)) {
  # 如果文件不存在，提供备选路径或让用户指定
  possible_paths <- c(
    "chikungunya_weather_population_merged.csv",
    "data/chikungunya_weather_population_merged.csv",
    "./chikungunya_weather_population_merged.csv"
  )
  
  data_path <- NULL
  for(path in possible_paths) {
    if(file.exists(path)) {
      data_path <- path
      break
    }
  }
  
  if(is.null(data_path)) {
    cat("数据文件未找到。请确保以下文件存在：\n")
    cat("- chikungunya_weather_population_merged.csv\n")
    cat("或修改代码中的data_path变量指向正确的文件路径。\n")
    stop("数据文件不存在")
  }
}

# 读取基孔肯雅热数据
chik_data <- tryCatch({
  read_csv(data_path, locale = locale(encoding = "UTF-8"))
}, error = function(e) {
  cat("UTF-8编码失败，尝试其他编码...\n")
  tryCatch({
    read_csv(data_path, locale = locale(encoding = "GBK"))
  }, error = function(e2) {
    read.csv(data_path, stringsAsFactors = FALSE)
  })
})

setDT(chik_data)
cat("数据加载成功:", nrow(chik_data), "行,", ncol(chik_data), "列\n")

# 数据预处理
chik_data[, cases := as.numeric(Y)]  # 重命名病例数变量
chik_data[, year := as.integer(year)]
chik_data[, month := as.integer(month)]
chik_data[, cityid := as.factor(cityid)]

# 处理温度变量
if("temperature_mean" %in% colnames(chik_data)) {
  chik_data[, temperature_mean := as.numeric(temperature_mean)]
} else {
  stop("未找到temperature_mean变量，请检查数据")
}

# 处理人口变量
if("total_population" %in% colnames(chik_data)) {
  chik_data[, total_population := as.numeric(total_population)]
  chik_data[total_population <= 0 | is.na(total_population), total_population := 1]
  chik_data[, log_population := log(total_population)]
  offset_available <- TRUE
} else {
  cat("警告：未找到人口数据\n")
  offset_available <- FALSE
}

# 处理ICU变量（关键变量）
if("ICU" %in% colnames(chik_data)) {
  chik_data[, ICU_raw := as.numeric(ICU)]
  # 创建二元ICU变量
  chik_data[, ICU_binary := ifelse(ICU_raw > 0, "Has_ICU", "No_ICU")]
  chik_data[, ICU_binary_num := ifelse(ICU_binary == "Has_ICU", 1, 0)]
  cat("ICU变量分布:\n")
  print(table(chik_data$ICU_binary, useNA = "ifany"))
} else {
  stop("未找到ICU变量，这是计算双重脆弱指数的关键变量")
}

# 处理其他控制变量
control_vars_available <- c()
if("humidity_mean" %in% colnames(chik_data)) {
  chik_data[, humidity_mean := as.numeric(humidity_mean)]
  control_vars_available <- c(control_vars_available, "humidity_mean")
}
if("pressure_mean" %in% colnames(chik_data)) {
  chik_data[, pressure_mean := as.numeric(pressure_mean)]
  control_vars_available <- c(control_vars_available, "pressure_mean")
}
if("wind_speed_mean" %in% colnames(chik_data)) {
  chik_data[, wind_speed_mean := as.numeric(wind_speed_mean)]
  control_vars_available <- c(control_vars_available, "wind_speed_mean")
}

# 处理土地利用变量
landuse_vars <- c("forest", "farming", "urban")
available_landuse <- landuse_vars[landuse_vars %in% colnames(chik_data)]
if(length(available_landuse) > 0) {
  for(var in available_landuse) {
    chik_data[, (var) := as.numeric(get(var))]
  }
  control_vars_available <- c(control_vars_available, available_landuse)
}

# 创建年月标识符
chik_data[, year_month := paste0(year, "_", sprintf("%02d", month))]
chik_data[, year_month := as.factor(year_month)]

# 数据清理
chik_data_clean <- chik_data[
  !is.na(cases) & !is.na(temperature_mean) & !is.na(ICU_binary) & 
    cases >= 0 & year >= 2010 & year <= 2025 & month >= 1 & month <= 12
]

cat("数据清理完成:", nrow(chik_data_clean), "行保留\n")
cat("控制变量:", paste(control_vars_available, collapse = ", "), "\n")

#####################################
## 第二阶段：数据筛选（去除极端值）
#####################################

cat("\n======= 数据筛选（去除极端值）=======\n")

# 筛选极端温度数据（只删除1%和99%分位数外的数据）
temp_p1 <- quantile(chik_data_clean$temperature_mean, 0.01, na.rm = TRUE)
temp_p99 <- quantile(chik_data_clean$temperature_mean, 0.99, na.rm = TRUE)

cat("原始数据行数:", nrow(chik_data_clean), "\n")
cat("温度范围:", round(range(chik_data_clean$temperature_mean, na.rm = TRUE), 1), "°C\n")
cat("1%分位数:", round(temp_p1, 1), "°C\n")
cat("99%分位数:", round(temp_p99, 1), "°C\n")

# 筛选数据：保留1%-99%范围内的数据
chik_data_filtered <- chik_data_clean[
  temperature_mean >= temp_p1 & temperature_mean <= temp_p99
]

cat("筛选后数据行数:", nrow(chik_data_filtered), "\n")
cat("删除的数据量:", nrow(chik_data_clean) - nrow(chik_data_filtered), "行 (", 
    round((nrow(chik_data_clean) - nrow(chik_data_filtered))/nrow(chik_data_clean)*100, 1), "%)\n")
cat("筛选后温度范围:", round(range(chik_data_filtered$temperature_mean, na.rm = TRUE), 1), "°C\n")

#####################################
## 第三阶段：创建12分箱温度模型
#####################################

create_temperature_bins_12 <- function(data, temp_var = "temperature_mean", n_bins = 12, reference_temp = 18) {
  
  cat("\n=== 创建12个温度分箱 ===\n")
  cat("目标参考温度:", reference_temp, "°C\n")
  cat("分箱数量:", n_bins, "\n")
  
  # 计算温度分位数
  temp_quantiles <- quantile(data[[temp_var]], 
                             probs = seq(0, 1, length.out = n_bins + 1), 
                             na.rm = TRUE)
  
  cat("12分箱温度分位数切点:\n")
  print(round(temp_quantiles, 1))
  
  # 创建温度分箱
  data$temp_bin <- cut(data[[temp_var]], 
                       breaks = temp_quantiles,
                       include.lowest = TRUE,
                       labels = paste0("tbin", 1:n_bins))
  
  # 找到最接近参考温度的分箱
  temp_bin_centers <- data %>%
    group_by(temp_bin) %>%
    summarise(temp_center = mean(.data[[temp_var]], na.rm = TRUE), .groups = 'drop')
  
  closest_bin_idx <- which.min(abs(temp_bin_centers$temp_center - reference_temp))
  reference_bin <- paste0("tbin", closest_bin_idx)
  
  cat("选择的参考分箱:", reference_bin, "，中心温度:", 
      round(temp_bin_centers$temp_center[closest_bin_idx], 1), "°C\n")
  
  data$temp_bin <- relevel(factor(data$temp_bin), ref = reference_bin)
  
  # 创建12分箱统计表
  bin_stats <- data %>%
    group_by(temp_bin) %>%
    summarise(
      bin_number = as.numeric(gsub("tbin", "", temp_bin)),
      n_obs = n(),
      temp_min = round(min(.data[[temp_var]], na.rm = TRUE), 1),
      temp_max = round(max(.data[[temp_var]], na.rm = TRUE), 1),
      temp_mean = round(mean(.data[[temp_var]], na.rm = TRUE), 1),
      cases_total = sum(cases, na.rm = TRUE),
      .groups = 'drop'
    ) %>%
    mutate(temp_range = paste0(temp_min, "-", temp_max, "°C")) %>%
    arrange(bin_number)
  
  cat("\n12温度分箱统计:\n")
  print(bin_stats[, c("temp_bin", "temp_range", "temp_mean", "n_obs", "cases_total")])
  
  return(list(data = data, bin_stats = bin_stats, reference_bin = reference_bin))
}

# 应用12分箱
binning_result <- create_temperature_bins_12(
  chik_data_filtered, 
  temp_var = "temperature_mean", 
  n_bins = 12, 
  reference_temp = 18
)

chik_data_binned <- binning_result$data
bin_stats <- binning_result$bin_stats
reference_bin <- binning_result$reference_bin

# 创建12个温度分箱指示变量
for(i in 1:12) {
  bin_name <- paste0("tbin", i)
  chik_data_binned[[paste0("temp_", bin_name)]] <- as.numeric(chik_data_binned$temp_bin == bin_name)
}

#####################################
## 第四阶段：估计交互效应模型
#####################################

cat("\n======= 估计温度分箱×ICU交互效应模型 =======\n")

ref_num <- as.numeric(gsub("tbin", "", reference_bin))

# 创建ICU交互项
for(i in 1:12) {
  bin_name <- paste0("tbin", i)
  
  # 创建分箱指示变量
  chik_data_binned[[paste0("temp_", bin_name)]] <- as.numeric(chik_data_binned$temp_bin == bin_name)
  
  # 创建与ICU的交互项
  chik_data_binned[[paste0("temp_", bin_name, "_no_icu")]] <- 
    chik_data_binned[[paste0("temp_", bin_name)]] * (1 - chik_data_binned$ICU_binary_num)
  
  chik_data_binned[[paste0("temp_", bin_name, "_has_icu")]] <- 
    chik_data_binned[[paste0("temp_", bin_name)]] * chik_data_binned$ICU_binary_num
}

# 构建温度分箱项（排除参考分箱）
temp_interaction_terms <- c()
for(i in 1:12) {
  if(i != ref_num) {
    temp_interaction_terms <- c(temp_interaction_terms, 
                                paste0("temp_tbin", i, "_no_icu"),
                                paste0("temp_tbin", i, "_has_icu"))
  }
}

# 构建模型公式
all_vars <- c(control_vars_available, temp_interaction_terms)
formula_str <- paste("cases ~", paste(all_vars, collapse = " + "), "| cityid + year_month")

cat("交互模型公式:", substr(formula_str, 1, 100), "...\n")
cat("温度交互项数量:", length(temp_interaction_terms), "个（参考分箱:", reference_bin, "）\n")

# 估计模型
if (offset_available) {
  model_interaction <- fepois(as.formula(formula_str), 
                              offset = ~log_population,
                              data = chik_data_binned)
  cat("✓ 交互模型包含人口偏移量\n")
} else {
  model_interaction <- fepois(as.formula(formula_str), data = chik_data_binned)
  cat("⚠ 交互模型不包含人口偏移量\n")
}

cat("交互模型估计完成\n")
cat("模型系数数量:", length(coef(model_interaction)), "\n")
cat("模型AIC:", format(AIC(model_interaction), scientific = FALSE), "\n")

#####################################
## 第五阶段：计算双重脆弱指数的核心函数
#####################################

calculate_dual_vulnerability_index <- function(model, bin_stats, reference_bin, data, n_bins = 12) {
  
  cat("\n=== 计算双重脆弱指数 ===\n")
  
  model_coef <- coef(model)
  ref_num <- as.numeric(gsub("tbin", "", reference_bin))
  
  # 步骤1：计算每个分箱的相对风险比（分组计算）
  temp_effects_by_icu <- data.frame(
    Bin = rep(paste0("tbin", 1:n_bins), 2),
    Bin_Number = rep(1:n_bins, 2),
    ICU_Status = rep(c("No_ICU", "Has_ICU"), each = n_bins),
    Center_Temp = numeric(n_bins * 2),
    Temp_Range = character(n_bins * 2),
    Coefficient = numeric(n_bins * 2),
    Relative_Risk = numeric(n_bins * 2),
    Is_Reference = logical(n_bins * 2),
    stringsAsFactors = FALSE
  )
  
  # 填充分箱信息
  for(i in 1:n_bins) {
    bin_info <- bin_stats[bin_stats$bin_number == i, ]
    if(nrow(bin_info) > 0) {
      temp_effects_by_icu$Center_Temp[temp_effects_by_icu$Bin_Number == i] <- bin_info$temp_mean
      temp_effects_by_icu$Temp_Range[temp_effects_by_icu$Bin_Number == i] <- bin_info$temp_range
    }
  }
  
  # 计算相对风险比
  for(i in 1:nrow(temp_effects_by_icu)) {
    bin_num <- temp_effects_by_icu$Bin_Number[i]
    icu_status <- temp_effects_by_icu$ICU_Status[i]
    
    if(bin_num == ref_num) {
      # 参考分箱
      temp_effects_by_icu$Coefficient[i] <- 0
      temp_effects_by_icu$Relative_Risk[i] <- 1.0
      temp_effects_by_icu$Is_Reference[i] <- TRUE
    } else {
      # 非参考分箱
      var_name <- paste0("temp_tbin", bin_num, "_", tolower(icu_status))
      
      if(var_name %in% names(model_coef)) {
        coef_val <- model_coef[var_name]
        rr_val <- exp(coef_val)
        
        temp_effects_by_icu$Coefficient[i] <- round(coef_val, 4)
        temp_effects_by_icu$Relative_Risk[i] <- round(rr_val, 4)
      } else {
        # 缺失的系数设为参考值
        temp_effects_by_icu$Coefficient[i] <- 0
        temp_effects_by_icu$Relative_Risk[i] <- 1.0
      }
    }
  }
  
  cat("温度×ICU交互效应表计算完成\n")
  
  # 步骤2：为每个观测点计算相对风险比
  data$RR_no_icu <- 1  # 初始化
  data$RR_has_icu <- 1  # 初始化
  
  for(i in 1:n_bins) {
    bin_name <- paste0("tbin", i)
    
    # 获取该分箱的RR值
    rr_no_icu <- temp_effects_by_icu$Relative_Risk[
      temp_effects_by_icu$Bin_Number == i & temp_effects_by_icu$ICU_Status == "No_ICU"
    ]
    rr_has_icu <- temp_effects_by_icu$Relative_Risk[
      temp_effects_by_icu$Bin_Number == i & temp_effects_by_icu$ICU_Status == "Has_ICU"
    ]
    
    # 为该分箱的所有观测值分配RR
    data[temp_bin == bin_name, RR_no_icu := rr_no_icu]
    data[temp_bin == bin_name, RR_has_icu := rr_has_icu]
  }
  
  # 步骤3：计算气候暴露风险（基于无ICU情景）
  data[, AF_climate := pmax(0, 1 - 1/RR_no_icu)]  # 保护性效应修正
  data[, AC_climate := cases * AF_climate]  # 气候归因病例数
  
  # 步骤4：计算城市级别的气候暴露风险
  climate_risk <- data[, .(
    total_cases = sum(cases, na.rm = TRUE),
    total_climate_attributable = sum(AC_climate, na.rm = TRUE),
    climate_exposure_risk = ifelse(sum(cases, na.rm = TRUE) > 0,
                                   sum(AC_climate, na.rm = TRUE) / sum(cases, na.rm = TRUE),
                                   0)
  ), by = .(cityid, month)]
  
  # 步骤5：计算卫生系统脆弱性
  city_icu_status <- data[, .(
    ICU_available = first(ICU_binary_num),
    health_vulnerability = 1 - first(ICU_binary_num)  # 无ICU=脆弱=1，有ICU=韧性=0
  ), by = cityid]
  
  # 步骤6：合并数据并计算双重脆弱指数
  vulnerability_data <- merge(climate_risk, city_icu_status, by = "cityid")
  
  # 归一化气候暴露风险（0-1范围）
  if(max(vulnerability_data$climate_exposure_risk, na.rm = TRUE) > 
     min(vulnerability_data$climate_exposure_risk, na.rm = TRUE)) {
    vulnerability_data[, climate_risk_normalized := 
                         (climate_exposure_risk - min(climate_exposure_risk, na.rm = TRUE)) / 
                         (max(climate_exposure_risk, na.rm = TRUE) - min(climate_exposure_risk, na.rm = TRUE))]
  } else {
    vulnerability_data[, climate_risk_normalized := 0]
  }
  
  # 计算双重脆弱指数 (DVI)
  vulnerability_data[, dual_vulnerability_index := climate_risk_normalized * health_vulnerability]
  
  # 创建分级
  vulnerability_data[, vulnerability_level := cut(
    dual_vulnerability_index,
    breaks = c(-0.001, 0.001, 0.25, 0.5, 0.75, 1.0),
    labels = c("韧性良好(有ICU)", "低脆弱性", "中等脆弱性", "高脆弱性", "极高脆弱性"),
    include.lowest = TRUE
  )]
  
  cat("双重脆弱指数计算完成\n")
  cat("脆弱性分级分布:\n")
  print(table(vulnerability_data$vulnerability_level, useNA = "ifany"))
  
  return(list(
    temp_effects = temp_effects_by_icu,
    vulnerability_data = vulnerability_data,
    city_icu_status = city_icu_status,
    detailed_data = data
  ))
}

# 执行双重脆弱指数计算
dvi_results <- calculate_dual_vulnerability_index(
  model_interaction, bin_stats, reference_bin, chik_data_binned, n_bins = 12
)

#####################################
## 第六阶段：创建可视化
#####################################

cat("\n======= 创建双重脆弱指数可视化 =======\n")

# 1. 温度×ICU交互效应森林图
create_interaction_forest_plot <- function(temp_effects, reference_bin, save_path) {
  
  ref_num <- as.numeric(gsub("tbin", "", reference_bin))
  
  # 准备森林图数据
  forest_data <- temp_effects %>%
    mutate(
      group = paste0(Temp_Range, "\n(", Center_Temp, "°C)"),
      is_reference = (Bin_Number == ref_num),
      color_group = ifelse(ICU_Status == "No_ICU", "无ICU地区", "有ICU地区"),
      bin_label = paste0("T", Bin_Number)
    ) %>%
    arrange(Bin_Number, ICU_Status)
  
  # 定义颜色
  colors <- c("无ICU地区" = "#e74c3c", "有ICU地区" = "#3498db")
  
  # 创建森林图
  forest_plot <- ggplot(forest_data, aes(x = Relative_Risk, y = reorder(bin_label, -Bin_Number))) +
    
    # 添加参考线
    geom_vline(xintercept = 1, linetype = "dashed", color = "gray50", size = 0.8) +
    
    # 添加点估计
    geom_point(aes(color = color_group, shape = color_group), 
               size = 3.5, stroke = 1.2, position = position_dodge(width = 0.4)) +
    
    # 分面显示ICU状态
    facet_wrap(~ color_group, ncol = 2, scales = "free_y") +
    
    # 使用对数刻度
    scale_x_log10(
      breaks = c(0.1, 0.2, 0.5, 1, 2, 5, 10, 20),
      labels = c("0.1", "0.2", "0.5", "1.0", "2.0", "5.0", "10.0", "20.0"),
      limits = c(0.1, 25)
    ) +
    
    # 设置颜色和形状
    scale_color_manual(values = colors) +
    scale_shape_manual(values = c(16, 17)) +
    
    # 设置主题
    theme_minimal() +
    theme(
      text = element_text(family = "sans", color = "#333333"),
      plot.title = element_text(size = 16, face = "bold", hjust = 0.5, margin = margin(b = 20)),
      plot.subtitle = element_text(size = 12, hjust = 0.5, color = "gray60"),
      axis.title.x = element_text(size = 12, margin = margin(t = 15)),
      axis.title.y = element_text(size = 12, margin = margin(r = 15)),
      axis.text = element_text(size = 10),
      axis.text.y = element_text(size = 8),
      strip.text = element_text(size = 12, face = "bold"),
      panel.grid.minor = element_blank(),
      panel.grid.major.y = element_line(color = "gray90", size = 0.5),
      panel.grid.major.x = element_line(color = "gray90", size = 0.5),
      legend.position = "none",
      plot.margin = margin(20, 20, 20, 20)
    ) +
    
    # 设置标签
    labs(
      title = "温度分箱与基孔肯雅热发病风险的ICU交互效应森林图（12分箱）",
      subtitle = paste0("参考温度区间: ", forest_data$Temp_Range[forest_data$is_reference][1]),
      x = "相对风险比 (对数刻度)",
      y = "温度分箱"
    )
  
  # 保存森林图
  forest_file <- file.path(save_path, "dual_vulnerability_interaction_forest_plot.png")
  
  tryCatch({
    ggsave(forest_file, forest_plot, width = 16, height = 12, dpi = 300, bg = "white")
    cat("交互效应森林图已保存到:", forest_file, "\n")
  }, error = function(e) {
    cat("森林图保存失败:", e$message, "\n")
  })
  
  return(list(plot = forest_plot, file = forest_file))
}

# 2. 双重脆弱指数分布图
create_vulnerability_distribution_plots <- function(vulnerability_data, save_path) {
  
  # 脆弱性指数分布直方图
  hist_plot <- ggplot(vulnerability_data, aes(x = dual_vulnerability_index)) +
    geom_histogram(aes(fill = vulnerability_level), bins = 30, alpha = 0.8) +
    scale_fill_viridis_d(option = "plasma", name = "脆弱性等级") +
    labs(
      title = "双重脆弱指数分布",
      subtitle = "基于气候暴露风险和卫生系统脆弱性",
      x = "双重脆弱指数 (0-1)",
      y = "城市-月份观测数量"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      legend.position = "bottom"
    )
  
  # 脆弱性等级饼图
  level_counts <- vulnerability_data[, .N, by = vulnerability_level]
  level_counts[, percentage := round(N / sum(N) * 100, 1)]
  
  pie_plot <- ggplot(level_counts, aes(x = "", y = N, fill = vulnerability_level)) +
    geom_bar(stat = "identity", width = 1) +
    coord_polar("y", start = 0) +
    scale_fill_viridis_d(option = "plasma", name = "脆弱性等级") +
    geom_text(aes(label = paste0(percentage, "%")), 
              position = position_stack(vjust = 0.5), color = "white", size = 4) +
    labs(
      title = "双重脆弱性等级分布",
      subtitle = "全国城市-月份观测的脆弱性构成"
    ) +
    theme_void() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      legend.position = "right"
    )
  
  # 保存图表
  hist_file <- file.path(save_path, "dual_vulnerability_distribution.png")
  pie_file <- file.path(save_path, "dual_vulnerability_levels_pie.png")
  
  tryCatch({
    ggsave(hist_file, hist_plot, width = 12, height = 8, dpi = 300, bg = "white")
    cat("脆弱性分布图已保存到:", hist_file, "\n")
  }, error = function(e) {
    cat("分布图保存失败:", e$message, "\n")
  })
  
  tryCatch({
    ggsave(pie_file, pie_plot, width = 10, height = 8, dpi = 300, bg = "white")
    cat("脆弱性等级饼图已保存到:", pie_file, "\n")
  }, error = function(e) {
    cat("饼图保存失败:", e$message, "\n")
  })
  
  return(list(
    hist_plot = hist_plot, 
    pie_plot = pie_plot,
    hist_file = hist_file,
    pie_file = pie_file
  ))
}

# 3. 月度脆弱性趋势图
create_monthly_vulnerability_trends <- function(vulnerability_data, save_path) {
  
  # 计算月度统计
  monthly_stats <- vulnerability_data[, .(
    avg_dvi = mean(dual_vulnerability_index, na.rm = TRUE),
    median_dvi = median(dual_vulnerability_index, na.rm = TRUE),
    high_vuln_cities = sum(dual_vulnerability_index > 0.5, na.rm = TRUE),
    total_cities = .N,
    high_vuln_pct = sum(dual_vulnerability_index > 0.5, na.rm = TRUE) / .N * 100
  ), by = month]
  
  # 添加月份名称
  month_names_cn <- c("一月", "二月", "三月", "四月", "五月", "六月",
                      "七月", "八月", "九月", "十月", "十一月", "十二月")
  monthly_stats[, month_name := month_names_cn[month]]
  
  # 创建趋势图
  trend_plot <- ggplot(monthly_stats, aes(x = factor(month))) +
    geom_line(aes(y = avg_dvi, group = 1), color = "#e74c3c", size = 2) +
    geom_point(aes(y = avg_dvi), color = "#e74c3c", size = 4) +
    geom_text(aes(y = avg_dvi, label = round(avg_dvi, 3)), 
              vjust = -1, size = 3.5, color = "#e74c3c") +
    scale_x_discrete(labels = month_names_cn) +
    labs(
      title = "月度双重脆弱指数趋势",
      subtitle = "展示季节性脆弱性变化模式",
      x = "月份",
      y = "平均双重脆弱指数"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      axis.text.x = element_text(angle = 45, hjust = 1),
      panel.grid.minor = element_blank()
    )
  
  # 高脆弱性城市百分比图
  percent_plot <- ggplot(monthly_stats, aes(x = factor(month), y = high_vuln_pct)) +
    geom_col(fill = "#e74c3c", alpha = 0.8) +
    geom_text(aes(label = paste0(round(high_vuln_pct, 1), "%")), 
              vjust = -0.5, size = 3) +
    scale_x_discrete(labels = month_names_cn) +
    labs(
      title = "各月份高脆弱性城市比例",
      subtitle = "脆弱指数>0.5的城市占比",
      x = "月份",
      y = "高脆弱性城市比例 (%)"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      axis.text.x = element_text(angle = 45, hjust = 1)
    )
  
  # 保存图表
  trend_file <- file.path(save_path, "monthly_vulnerability_trends.png")
  percent_file <- file.path(save_path, "monthly_high_vulnerability_percentage.png")
  
  tryCatch({
    ggsave(trend_file, trend_plot, width = 12, height = 8, dpi = 300, bg = "white")
    cat("月度趋势图已保存到:", trend_file, "\n")
  }, error = function(e) {
    cat("趋势图保存失败:", e$message, "\n")
  })
  
  tryCatch({
    ggsave(percent_file, percent_plot, width = 12, height = 8, dpi = 300, bg = "white")
    cat("高脆弱性比例图已保存到:", percent_file, "\n")
  }, error = function(e) {
    cat("比例图保存失败:", e$message, "\n")
  })
  
  return(list(
    trend_plot = trend_plot,
    percent_plot = percent_plot,
    monthly_stats = monthly_stats,
    trend_file = trend_file,
    percent_file = percent_file
  ))
}

# 4. 综合仪表板
create_comprehensive_dashboard <- function(temp_effects, vulnerability_data, save_path) {
  
  # 创建4个子图的综合仪表板
  
  # 子图1：无ICU地区的温度风险
  no_icu_effects <- temp_effects[temp_effects$ICU_Status == "No_ICU", ]
  
  risk_plot <- ggplot(no_icu_effects, aes(x = Center_Temp, y = Relative_Risk)) +
    geom_hline(yintercept = 1, linetype = "dashed", color = "gray60") +
    geom_line(color = "#e74c3c", size = 2) +
    geom_point(color = "#e74c3c", size = 3) +
    scale_y_log10() +
    labs(
      title = "无ICU地区温度风险曲线",
      x = "温度 (°C)",
      y = "相对风险比"
    ) +
    theme_minimal() +
    theme(plot.title = element_text(size = 10, face = "bold"))
  
  # 子图2：ICU保护效应
  protection_data <- temp_effects %>%
    select(Bin_Number, ICU_Status, Relative_Risk) %>%
    pivot_wider(names_from = ICU_Status, values_from = Relative_Risk) %>%
    mutate(protection_effect = (No_ICU - Has_ICU) / No_ICU * 100)
  
  protection_plot <- ggplot(protection_data, aes(x = Bin_Number, y = protection_effect)) +
    geom_col(fill = "#3498db", alpha = 0.8) +
    geom_hline(yintercept = 0, linetype = "dashed", color = "gray60") +
    labs(
      title = "ICU保护效应 (%)",
      x = "温度分箱",
      y = "保护效应 (%)"
    ) +
    theme_minimal() +
    theme(plot.title = element_text(size = 10, face = "bold"))
  
  # 子图3：脆弱性指数分布
  vuln_dist_plot <- ggplot(vulnerability_data, aes(x = dual_vulnerability_index)) +
    geom_histogram(bins = 20, fill = "#9b59b6", alpha = 0.8) +
    labs(
      title = "双重脆弱指数分布",
      x = "脆弱指数",
      y = "频数"
    ) +
    theme_minimal() +
    theme(plot.title = element_text(size = 10, face = "bold"))
  
  # 子图4：脆弱性等级统计
  level_stats <- vulnerability_data[, .N, by = vulnerability_level]
  level_stats[, percentage := N / sum(N) * 100]
  
  level_plot <- ggplot(level_stats, aes(x = reorder(vulnerability_level, N), y = N)) +
    geom_col(fill = "#e67e22", alpha = 0.8) +
    geom_text(aes(label = paste0(round(percentage, 1), "%")), hjust = -0.1, size = 3) +
    coord_flip() +
    labs(
      title = "脆弱性等级分布",
      x = "脆弱性等级",
      y = "城市数量"
    ) +
    theme_minimal() +
    theme(plot.title = element_text(size = 10, face = "bold"))
  
  # 组合图表
  dashboard <- grid.arrange(
    risk_plot, protection_plot,
    vuln_dist_plot, level_plot,
    ncol = 2, nrow = 2,
    top = "巴西基孔肯雅热双重脆弱性综合仪表板"
  )
  
  # 保存仪表板
  dashboard_file <- file.path(save_path, "dual_vulnerability_comprehensive_dashboard.png")
  
  tryCatch({
    ggsave(dashboard_file, dashboard, width = 16, height = 12, dpi = 300, bg = "white")
    cat("综合仪表板已保存到:", dashboard_file, "\n")
  }, error = function(e) {
    cat("仪表板保存失败:", e$message, "\n")
  })
  
  return(list(
    dashboard = dashboard,
    dashboard_file = dashboard_file
  ))
}

# 执行可视化创建
forest_result <- create_interaction_forest_plot(
  dvi_results$temp_effects, reference_bin, output_dir
)

distribution_result <- create_vulnerability_distribution_plots(
  dvi_results$vulnerability_data, output_dir
)

monthly_result <- create_monthly_vulnerability_trends(
  dvi_results$vulnerability_data, output_dir
)

dashboard_result <- create_comprehensive_dashboard(
  dvi_results$temp_effects, dvi_results$vulnerability_data, output_dir
)

#####################################
## 第七阶段：保存分析结果（修复版）
#####################################

cat("\n======= 保存双重脆弱指数分析结果 =======\n")

# 安全写入函数
safe_write_csv <- function(data, filename, description = "文件") {
  tryCatch({
    write.csv(data, filename, row.names = FALSE, fileEncoding = "UTF-8")
    cat("✓", description, "已保存:", filename, "\n")
    return(TRUE)
  }, error = function(e) {
    cat("✗", description, "保存失败:", e$message, "\n")
    return(FALSE)
  })
}

safe_write_xlsx <- function(data_list, filename, description = "Excel文件") {
  tryCatch({
    write_xlsx(data_list, filename)
    cat("✓", description, "已保存:", filename, "\n")
    return(TRUE)
  }, error = function(e) {
    cat("✗", description, "保存失败:", e$message, "\n")
    return(FALSE)
  })
}

# 定义月份名称（确保在使用前定义）
month_names_cn <- c("一月", "二月", "三月", "四月", "五月", "六月",
                    "七月", "八月", "九月", "十月", "十一月", "十二月")

# 保存主要结果表格
safe_write_csv(dvi_results$vulnerability_data, 
               file.path(output_dir, "dual_vulnerability_index_complete_results.csv"),
               "双重脆弱指数完整结果")

safe_write_csv(dvi_results$temp_effects, 
               file.path(output_dir, "temperature_icu_interaction_effects.csv"),
               "温度ICU交互效应")

safe_write_csv(dvi_results$city_icu_status, 
               file.path(output_dir, "city_icu_status_summary.csv"),
               "城市ICU状态汇总")

# 创建月度汇总统计
monthly_summary_dvi <- dvi_results$vulnerability_data[, .(
  cities_count = .N,
  avg_dvi = mean(dual_vulnerability_index, na.rm = TRUE),
  median_dvi = median(dual_vulnerability_index, na.rm = TRUE),
  min_dvi = min(dual_vulnerability_index, na.rm = TRUE),
  max_dvi = max(dual_vulnerability_index, na.rm = TRUE),
  sd_dvi = sd(dual_vulnerability_index, na.rm = TRUE),
  high_vulnerability_cities = sum(dual_vulnerability_index > 0.5, na.rm = TRUE),
  high_vulnerability_pct = sum(dual_vulnerability_index > 0.5, na.rm = TRUE) / .N * 100,
  resilient_cities = sum(dual_vulnerability_index == 0, na.rm = TRUE),
  resilient_pct = sum(dual_vulnerability_index == 0, na.rm = TRUE) / .N * 100
), by = month]

monthly_summary_dvi[, month_name := month_names_cn[month]]

safe_write_csv(monthly_summary_dvi, 
               file.path(output_dir, "monthly_dual_vulnerability_summary.csv"),
               "月度脆弱性汇总")

# 创建城市汇总统计
city_summary_dvi <- dvi_results$vulnerability_data[, .(
  months_observed = .N,
  avg_dvi = mean(dual_vulnerability_index, na.rm = TRUE),
  max_dvi = max(dual_vulnerability_index, na.rm = TRUE),
  total_cases = sum(total_cases, na.rm = TRUE),
  total_climate_attributable = sum(total_climate_attributable, na.rm = TRUE),
  avg_climate_risk = mean(climate_exposure_risk, na.rm = TRUE)
), by = .(cityid, health_vulnerability, ICU_available)]

safe_write_csv(city_summary_dvi, 
               file.path(output_dir, "city_dual_vulnerability_summary.csv"),
               "城市脆弱性汇总")

#####################################
## 第八阶段：生成标准城市-月份归因表格
#####################################

cat("\n======= 生成标准城市-月份归因表格 =======\n")

# 创建详细的城市-月份归因表格（类似12分箱归因代码的输出）
create_city_month_attribution_table <- function(detailed_data, vulnerability_data, monthly_summary, month_names_cn) {
  
  # 从详细数据计算每个城市-月份的统计
  city_month_stats <- detailed_data[, .(
    total_cases = sum(cases, na.rm = TRUE),
    total_attributable_cases_climate = sum(AC_climate, na.rm = TRUE),
    avg_temperature = mean(temperature_mean, na.rm = TRUE),
    min_temperature = min(temperature_mean, na.rm = TRUE),
    max_temperature = max(temperature_mean, na.rm = TRUE),
    avg_AF_climate = mean(AF_climate, na.rm = TRUE),
    avg_RR_no_icu = mean(RR_no_icu, na.rm = TRUE),
    avg_RR_has_icu = mean(RR_has_icu, na.rm = TRUE),
    observations = .N,
    ICU_status = first(ICU_binary),
    ICU_available = first(ICU_binary_num)
  ), by = .(cityid, month)]
  
  # 计算PAF
  city_month_stats[, PAF_percent_climate := ifelse(total_cases > 0, 
                                                   total_attributable_cases_climate / total_cases * 100, 
                                                   0)]
  
  # 合并脆弱性数据
  attribution_table <- merge(
    city_month_stats,
    vulnerability_data[, .(cityid, month, dual_vulnerability_index, vulnerability_level, 
                           climate_exposure_risk, climate_risk_normalized)],
    by = c("cityid", "month"),
    all.x = TRUE
  )
  
  # 添加月份名称和季节
  attribution_table[, month_name_cn := month_names_cn[month]]
  attribution_table[, season := case_when(
    month %in% c(12, 1, 2) ~ "夏季",
    month %in% 3:5 ~ "秋季", 
    month %in% 6:8 ~ "冬季",
    month %in% 9:11 ~ "春季"
  )]
  
  # 重新排列列的顺序
  final_table <- attribution_table[, .(
    cityid,
    month,
    month_name_cn,
    season,
    ICU_status,
    ICU_available,
    total_cases,
    total_attributable_cases_climate,
    PAF_percent_climate = round(PAF_percent_climate, 3),
    avg_AF_climate = round(avg_AF_climate, 4),
    dual_vulnerability_index = round(dual_vulnerability_index, 4),
    vulnerability_level,
    climate_exposure_risk = round(climate_exposure_risk, 4),
    climate_risk_normalized = round(climate_risk_normalized, 4),
    avg_temperature = round(avg_temperature, 2),
    min_temperature = round(min_temperature, 2),
    max_temperature = round(max_temperature, 2),
    avg_RR_no_icu = round(avg_RR_no_icu, 4),
    avg_RR_has_icu = round(avg_RR_has_icu, 4),
    observations
  )]
  
  # 按城市ID和月份排序
  setorder(final_table, cityid, month)
  
  return(final_table)
}

# 生成标准归因表格
city_month_attribution_table <- create_city_month_attribution_table(
  dvi_results$detailed_data, 
  dvi_results$vulnerability_data, 
  monthly_summary_dvi, 
  month_names_cn
)

# 保存标准归因表格
safe_write_csv(city_month_attribution_table, 
               file.path(output_dir, "city_month_temperature_attribution_table_12bins.csv"),
               "城市-月份温度归因表格（12分箱）")

# 生成表格说明文档
table_documentation <- paste0(
  "城市-月份温度归因表格字段说明（12分箱双重脆弱指数版本）\n",
  "================================================================\n\n",
  
  "基本标识:\n",
  "- cityid: 城市标识符\n",
  "- month: 月份 (1-12)\n",
  "- month_name_cn: 中文月份名称\n",
  "- season: 季节 (春夏秋冬)\n\n",
  
  "ICU状态:\n",
  "- ICU_status: ICU状态 (Has_ICU/No_ICU)\n",
  "- ICU_available: ICU可用性 (1=有ICU, 0=无ICU)\n\n",
  
  "疾病负担:\n",
  "- total_cases: 该城市-月份的总病例数\n",
  "- total_attributable_cases_climate: 气候归因病例数\n\n",
  
  "归因分析:\n",
  "- PAF_percent_climate: 气候归因比例 (%) - 基于无ICU情景计算\n",
  "- avg_AF_climate: 平均归因分数\n\n",
  
  "双重脆弱性:\n",
  "- dual_vulnerability_index: 双重脆弱指数 (0-1)\n",
  "- vulnerability_level: 脆弱性等级 (韧性良好/低/中/高/极高脆弱性)\n",
  "- climate_exposure_risk: 气候暴露风险\n",
  "- climate_risk_normalized: 归一化气候风险\n\n",
  
  "温度环境:\n",
  "- avg_temperature: 平均温度 (°C)\n",
  "- min_temperature: 最低温度 (°C)\n",
  "- max_temperature: 最高温度 (°C)\n\n",
  
  "相对风险:\n",
  "- avg_RR_no_icu: 无ICU情景下的平均相对风险比\n",
  "- avg_RR_has_icu: 有ICU情景下的平均相对风险比\n\n",
  
  "观测信息:\n",
  "- observations: 该城市-月份的观测次数\n\n",
  
  "关键说明:\n",
  "1. 双重脆弱指数 = 归一化气候风险 × 卫生系统脆弱性\n",
  "2. 有ICU城市的双重脆弱指数恒为0（韧性良好）\n",
  "3. 无ICU城市的双重脆弱指数 > 0（存在脆弱性）\n",
  "4. PAF_percent_climate基于无ICU情景计算，反映潜在气候风险\n",
  "5. 该表格可直接用于空间分析和政策制定\n\n",
  
  "文件生成时间: ", Sys.time(), "\n"
)

# 保存表格说明文档
writeLines(table_documentation, 
           file.path(output_dir, "city_month_attribution_table_documentation.txt"),
           useBytes = TRUE)

# 打印表格统计摘要
cat("\n======= 城市-月份归因表格统计摘要 =======\n")
cat("总观测数:", nrow(city_month_attribution_table), "\n")
cat("城市数:", length(unique(city_month_attribution_table$cityid)), "\n")
cat("有ICU城市观测:", sum(city_month_attribution_table$ICU_available), "\n")
cat("无ICU城市观测:", sum(1 - city_month_attribution_table$ICU_available), "\n")
cat("平均气候归因比例:", round(mean(city_month_attribution_table$PAF_percent_climate, na.rm = TRUE), 3), "%\n")
cat("平均双重脆弱指数:", round(mean(city_month_attribution_table$dual_vulnerability_index, na.rm = TRUE), 4), "\n")

# 按ICU状态分组统计
icu_stats <- city_month_attribution_table[, .(
  observations = .N,
  avg_PAF = mean(PAF_percent_climate, na.rm = TRUE),
  avg_DVI = mean(dual_vulnerability_index, na.rm = TRUE),
  avg_cases = mean(total_cases, na.rm = TRUE)
), by = ICU_status]

cat("\n按ICU状态分组统计:\n")
print(icu_stats)

# 创建Excel综合报告
excel_data_dvi_updated <- list(
  "城市月份归因表格12分箱" = city_month_attribution_table,
  "双重脆弱指数完整结果" = dvi_results$vulnerability_data,
  "温度ICU交互效应" = dvi_results$temp_effects,
  "城市ICU状态" = dvi_results$city_icu_status,
  "月度汇总统计" = monthly_summary_dvi,
  "城市汇总统计" = city_summary_dvi
)

safe_write_xlsx(excel_data_dvi_updated, 
                file.path(output_dir, "brazil_chikungunya_dual_vulnerability_index_results_updated.xlsx"),
                "Excel综合报告（更新版）")

#####################################
## 第九阶段：生成分析报告
#####################################

cat("\n======= 生成双重脆弱指数分析报告 =======\n")

# 计算关键统计指标
total_cities_analyzed <- length(unique(dvi_results$vulnerability_data$cityid))
total_observations <- nrow(dvi_results$vulnerability_data)
cities_with_icu <- sum(dvi_results$city_icu_status$ICU_available)
cities_without_icu <- sum(1 - dvi_results$city_icu_status$ICU_available)

overall_avg_dvi <- mean(dvi_results$vulnerability_data$dual_vulnerability_index, na.rm = TRUE)
high_vulnerability_obs <- sum(dvi_results$vulnerability_data$dual_vulnerability_index > 0.5, na.rm = TRUE)
high_vulnerability_pct <- high_vulnerability_obs / total_observations * 100

# 找出最高和最低脆弱性的月份
highest_vuln_month <- monthly_summary_dvi[which.max(avg_dvi), ]
lowest_vuln_month <- monthly_summary_dvi[which.min(avg_dvi), ]

# 找出最高风险的城市（无ICU组）
high_risk_cities <- dvi_results$vulnerability_data[
  health_vulnerability == 1 & dual_vulnerability_index > 0.7, 
  .(cityid, month, dual_vulnerability_index, climate_exposure_risk)
]
high_risk_cities <- high_risk_cities[order(-dual_vulnerability_index)]

# 生成分析报告
report_text_dvi <- paste0(
  "巴西基孔肯雅热双重脆弱指数分析报告\n",
  "==========================================\n\n",
  
  "## 分析概况\n",
  "- 数据期间: ", min(chik_data_binned$year), " - ", max(chik_data_binned$year), "\n",
  "- 分析城市数: ", total_cities_analyzed, "\n",
  "- 总观测数: ", format(total_observations, big.mark = ","), "\n",
  "- 温度分箱数: 12个（精细分箱）\n",
  "- 参考温度: 18°C (", reference_bin, ")\n",
  "- 有ICU城市: ", cities_with_icu, " (", round(cities_with_icu/total_cities_analyzed*100, 1), "%)\n",
  "- 无ICU城市: ", cities_without_icu, " (", round(cities_without_icu/total_cities_analyzed*100, 1), "%)\n\n",
  
  "## 双重脆弱指数主要发现\n",
  "- 总体平均脆弱指数: ", round(overall_avg_dvi, 4), "\n",
  "- 高脆弱性观测 (DVI>0.5): ", format(high_vulnerability_obs, big.mark = ","), 
  " (", round(high_vulnerability_pct, 1), "%)\n",
  "- 最高脆弱性月份: ", highest_vuln_month$month_name, 
  " (平均DVI=", round(highest_vuln_month$avg_dvi, 4), ")\n",
  "- 最低脆弱性月份: ", lowest_vuln_month$month_name,
  " (平均DVI=", round(lowest_vuln_month$avg_dvi, 4), ")\n",
  "- 韧性城市观测 (DVI=0): ", format(sum(dvi_results$vulnerability_data$dual_vulnerability_index == 0), big.mark = ","),
  " (", round(sum(dvi_results$vulnerability_data$dual_vulnerability_index == 0)/total_observations*100, 1), "%)\n\n",
  
  "## 脆弱性等级分布\n"
)

# 添加脆弱性等级统计
level_distribution <- dvi_results$vulnerability_data[, .N, by = vulnerability_level]
level_distribution[, percentage := round(N / sum(N) * 100, 1)]

for(i in 1:nrow(level_distribution)) {
  level_info <- level_distribution[i, ]
  report_text_dvi <- paste0(report_text_dvi,
                            "- ", level_info$vulnerability_level, ": ", 
                            format(level_info$N, big.mark = ","), " 观测 (", 
                            level_info$percentage, "%)\n")
}

# 添加季节性分析
seasonal_stats_dvi <- monthly_summary_dvi[, .(
  season = case_when(
    month %in% c(12, 1, 2) ~ "夏季",
    month %in% 3:5 ~ "秋季", 
    month %in% 6:8 ~ "冬季",
    month %in% 9:11 ~ "春季"
  ),
  avg_dvi_season = mean(avg_dvi, na.rm = TRUE),
  high_vuln_pct_season = mean(high_vulnerability_pct, na.rm = TRUE)
), by = .(season = case_when(
  month %in% c(12, 1, 2) ~ "夏季",
  month %in% 3:5 ~ "秋季", 
  month %in% 6:8 ~ "冬季",
  month %in% 9:11 ~ "春季"
))]

report_text_dvi <- paste0(report_text_dvi, "\n## 季节性特征（双重脆弱指数）\n")
for(i in 1:nrow(seasonal_stats_dvi)) {
  season_info <- seasonal_stats_dvi[i, ]
  report_text_dvi <- paste0(report_text_dvi, 
                            "- ", season_info$season, ": 平均DVI = ", round(season_info$avg_dvi_season, 4),
                            ", 高脆弱性比例 = ", round(season_info$high_vuln_pct_season, 1), "%\n")
}

# 添加高风险城市识别
if(nrow(high_risk_cities) > 0) {
  report_text_dvi <- paste0(report_text_dvi, "\n## 极高脆弱性城市识别 (DVI > 0.7, 无ICU)\n")
  top_risk_cities <- head(high_risk_cities, 10)
  for(i in 1:nrow(top_risk_cities)) {
    city_info <- top_risk_cities[i, ]
    report_text_dvi <- paste0(report_text_dvi,
                              "- 城市ID ", city_info$cityid, ", ", month_names_cn[city_info$month], 
                              ": DVI=", round(city_info$dual_vulnerability_index, 4), 
                              ", 气候风险=", round(city_info$climate_exposure_risk, 4), "\n")
  }
}

# 添加ICU保护效应分析
protection_analysis <- dvi_results$temp_effects %>%
  select(Bin_Number, ICU_Status, Relative_Risk) %>%
  pivot_wider(names_from = ICU_Status, values_from = Relative_Risk) %>%
  filter(!is.na(No_ICU) & !is.na(Has_ICU)) %>%
  mutate(protection_effect = (No_ICU - Has_ICU) / No_ICU * 100) %>%
  arrange(-protection_effect)

max_protection <- protection_analysis[1, ]
avg_protection <- mean(protection_analysis$protection_effect, na.rm = TRUE)

report_text_dvi <- paste0(report_text_dvi,
                          "\n## ICU保护效应分析\n",
                          "- 平均保护效应: ", round(avg_protection, 1), "%\n",
                          "- 最大保护效应: ", round(max_protection$protection_effect, 1), 
                          "% (温度分箱T", max_protection$Bin_Number, ")\n",
                          "- 有效保护分箱数: ", sum(protection_analysis$protection_effect > 0), 
                          "个 (共", nrow(protection_analysis), "个分箱)\n\n",
                          
                          "## 方法学说明\n",
                          "### 双重脆弱指数构建公式\n",
                          "1. 气候暴露风险 (R_climate): 基于无ICU情景的温度归因比例\n",
                          "2. 卫生系统脆弱性 (V_health): 1 - ICU可用性 (0/1)\n",
                          "3. 双重脆弱指数 (DVI): R_climate_normalized × V_health\n",
                          "4. 范围: 0-1，其中0表示韧性良好（有ICU保护），1表示极高脆弱性\n\n",
                          
                          "### 关键创新点\n",
                          "1. 整合气候暴露和卫生系统脆弱性的综合评估\n",
                          "2. 12分箱精细温度建模，更准确识别高风险温度区间\n",
                          "3. 量化ICU保护效应，为资源配置提供依据\n",
                          "4. 空间可视化友好的分级系统\n",
                          "5. 月度时间分辨率，支持季节性政策制定\n\n",
                          
                          "## 输出文件（双重脆弱指数版本）\n",
                          "### 数据表格\n",
                          "- city_month_temperature_attribution_table_12bins.csv: 标准城市-月份归因表格\n",
                          "- dual_vulnerability_index_complete_results.csv: 完整脆弱指数结果\n",
                          "- temperature_icu_interaction_effects.csv: 温度×ICU交互效应\n",
                          "- city_icu_status_summary.csv: 城市ICU状态汇总\n",
                          "- monthly_dual_vulnerability_summary.csv: 月度脆弱性统计\n",
                          "- city_dual_vulnerability_summary.csv: 城市脆弱性统计\n",
                          "- brazil_chikungunya_dual_vulnerability_index_results_updated.xlsx: Excel综合报告\n\n",
                          
                          "### 统计图表\n",
                          "- dual_vulnerability_interaction_forest_plot.png: 温度×ICU交互效应森林图\n",
                          "- dual_vulnerability_distribution.png: 脆弱指数分布图\n",
                          "- dual_vulnerability_levels_pie.png: 脆弱性等级饼图\n",
                          "- monthly_vulnerability_trends.png: 月度脆弱性趋势\n",
                          "- monthly_high_vulnerability_percentage.png: 月度高脆弱性比例\n",
                          "- dual_vulnerability_comprehensive_dashboard.png: 综合仪表板\n\n",
                          
                          "## 政策建议\n",
                          "### 优先行动\n",
                          "1. **紧急ICU建设**: 在DVI>0.7的无ICU城市优先建设重症监护设施\n",
                          "2. **季节性预警**: 基于", highest_vuln_month$month_name, "等高脆弱性月份加强预警\n",
                          "3. **区域协调**: 建立有ICU城市支援无ICU城市的区域协调机制\n",
                          "4. **分级管理**: 根据5级脆弱性分类实施差异化防控策略\n\n",
                          
                          "### 中长期规划\n",
                          "1. **韧性建设**: 将DVI=0的城市经验推广到高脆弱性地区\n",
                          "2. **能力建设**: 在中等脆弱性城市(DVI 0.25-0.5)加强医疗人员培训\n",
                          "3. **监测网络**: 建立基于温度分箱的实时风险监测系统\n",
                          "4. **研究拓展**: 将方法扩展到其他气候敏感性疾病\n\n",
                          
                          "## 研究局限性\n",
                          "1. ICU数据仅为数量，未考虑质量和利用率\n",
                          "2. 温度效应可能存在滞后，当前未考虑\n",
                          "3. 社会经济因素可能影响脆弱性，有待进一步整合\n",
                          "4. 跨区域医疗支援能力未纳入模型\n\n",
                          
                          "保存路径: ", output_dir, "\n",
                          "分析完成时间: ", Sys.time(), "\n"
)

# 保存分析报告
writeLines(report_text_dvi, 
           file.path(output_dir, "dual_vulnerability_analysis_report.txt"),
           useBytes = TRUE)

cat("✓ 双重脆弱指数分析报告已保存\n")

#####################################
## 第十阶段：最终总结
#####################################

cat("\n========== 双重脆弱指数计算系统运行完成 ==========\n")
cat("输出目录:", output_dir, "\n")
cat("分析完成时间:", as.character(Sys.time()), "\n\n")

cat("主要成果:\n")
cat("✓ 12分箱温度归因模型估计完成\n")
cat("✓ 温度×ICU交互效应量化完成\n") 
cat("✓ 双重脆弱指数计算完成\n")
cat("✓ 标准城市-月份归因表格生成\n")
cat("✓ 6类可视化图表创建\n")
cat("✓ Excel综合报告生成\n")
cat("✓ 详细分析报告撰写\n\n")

cat("核心输出文件:\n")
cat("📊 city_month_temperature_attribution_table_12bins.csv - 您要求的标准归因表格\n")
cat("📈 brazil_chikungunya_dual_vulnerability_index_results_updated.xlsx - Excel综合报告\n")
cat("📄 dual_vulnerability_analysis_report.txt - 详细分析报告\n")
cat("🎯 city_month_attribution_table_documentation.txt - 表格字段说明\n\n")

cat("政策应用要点:\n")
cat("🔍 识别极高脆弱性区域: DVI>0.7的无ICU城市\n")
cat("🏥 优先ICU建设: 红色高风险区域\n")
cat("📅 季节性预警: 基于月度脆弱性变化\n")
cat("🤝 区域协调: 有ICU城市支援无ICU城市\n")
cat("💪 韧性建设: 学习DVI=0城市的成功经验\n\n")

cat("研究创新性:\n")
cat("🆕 首次量化双重脆弱性: 气候×医疗资源\n")
cat("🔬 12分箱精细建模: 比传统6分箱更准确\n")
cat("🛡️ ICU保护效应量化: 直接计算设施保护价值\n")
cat("🗺️ 政策导向设计: 5级分类支持资源配置\n")
cat("📈 时空分辨率高: 城市-月份精度\n\n")

cat("========== 系统运行成功！==========\n")